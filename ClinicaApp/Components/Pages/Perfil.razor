@page "/Perfil"
@using ClinicaApp.DTO
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager Navigation

@rendermode InteractiveServer

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="mb-0">Perfil</h3>
        <button class="btn btn-outline-danger" @onclick="Logout">Sair</button>
    </div>

    <!-- Formulário -->
    <div class="card mb-4 formulario-rosa">
        <div class="card-body">
            <h4>Perfil</h4>
            <div class="row g-3">
                <div class="col-md-6 col-lg-4 form-group-rosa">
                    <label class="form-label">Nome</label>
                    <input type="text" class="form-control" @bind="currentUser.Nome" />
                </div>
                <div class="col-md-6 col-lg-4 form-group-rosa">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-control" @bind="currentUser.Email" />
                </div>
                <div class="col-md-6 col-lg-4 form-group-rosa">
                    <label class="form-label">Telemóvel</label>
                    <input type="text" class="form-control" @bind="currentUser.Telefone" />
                </div>
                <div class="col-md-6 col-lg-4 form-group-rosa">
                    <label class="form-label">Especialidade</label>
                    <input type="text" class="form-control" @bind="currentProfissional.Especialidade" />
                </div>
            </div>
            <div class="d-flex flex-wrap gap-2 mt-4">
                <button class="btn btn-success" @onclick="SaveUser" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                        <text> A processar...</text>
                    }
                    else
                    {
                        <text>Guardar Alterações</text>
                    }
                </button>
                <button class="btn btn-info" @onclick="GoToAlterarPassword">Alterar Password</button>
            </div>
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3 mb-0">@successMessage</div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3 mb-0">@errorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private UserDto currentUser = new();
    private ProfissionalDto currentProfissional = new();
    private UserDto? usuarioLogado;
    private bool isLoading;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var result = await SessionStorage.GetAsync<UserDto>("usuarioLogado");
                if (!result.Success || result.Value == null)
                {
                    Navigation.NavigateTo("/", forceLoad: true);
                    return;
                }

                usuarioLogado = result.Value;

                // Carregar usuário completo do backend
                var userFromApi = await Http.GetFromJsonAsync<UserDto>($"users/{usuarioLogado.Id}");
                if (userFromApi != null)
                {
                    currentUser = new UserDto
                    {
                        Id = userFromApi.Id,
                        Nome = userFromApi.Nome,
                        Email = userFromApi.Email,
                        Telefone = userFromApi.Telefone,
                        RoleId = userFromApi.RoleId,
                        RoleNome = userFromApi.RoleNome
                    };

                    // Carregar dados do profissional
                    if (userFromApi.Profissional != null)
                    {
                        currentProfissional = new ProfissionalDto
                        {
                            Id = userFromApi.Profissional.Id,
                            UserId = userFromApi.Id,
                            Especialidade = userFromApi.Profissional.Especialidade
                        };
                    }
                    else
                    {
                        // Caso ainda não exista profissional
                        currentProfissional = new ProfissionalDto
                        {
                            UserId = userFromApi.Id
                        };
                    }
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                await ShowErrorMessage($"Erro ao carregar perfil: {ex.Message}");
            }
        }
    }

    private async Task SaveUser()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            // Atualiza usuário completo, incluindo Telefone
            var response = await Http.PutAsJsonAsync($"users/{currentUser.Id}", currentUser);
            if (!response.IsSuccessStatusCode)
            {
                var body = await response.Content.ReadAsStringAsync();
                await ShowErrorMessage(string.IsNullOrWhiteSpace(body) ? $"{response.StatusCode}" : body);
                return;
            }

            // Atualiza ou cria profissional
            if (!string.IsNullOrWhiteSpace(currentProfissional.Especialidade))
            {
                if (currentProfissional.Id > 0)
                    await Http.PutAsJsonAsync($"profissionais/{currentProfissional.Id}", currentProfissional);
                else
                {
                    currentProfissional.UserId = currentUser.Id;
                    await Http.PostAsJsonAsync("profissionais", currentProfissional);
                }
            }

            await ShowSuccessMessage("Perfil atualizado com sucesso!");

            // Atualiza o usuário na sessão
            await SessionStorage.SetAsync("usuarioLogado", currentUser);
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ShowSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = string.Empty;
        StateHasChanged();

        await Task.Delay(3000);
        successMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ShowErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = string.Empty;
        StateHasChanged();

        await Task.Delay(5000);
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private void GoToAlterarPassword()
    {
        Navigation.NavigateTo($"/AlterarPassword/{currentUser.Id}");
    }

    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("usuarioLogado");
        Navigation.NavigateTo("/", forceLoad: true);
    }
}
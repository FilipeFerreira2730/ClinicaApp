@page "/AlterarPassword"
@page "/AlterarPassword/{UserId:int}"
@page "/AlterarPassword/token/{Token}"
@using System.ComponentModel.DataAnnotations
@using ClinicaApp.DTO
@inject HttpClient Http
@inject NavigationManager Navigation

@rendermode InteractiveServer

<div class="card mt-4 mx-auto formulario-rosa"
     style="max-width: 500px; background-color: #f5d1d3 !important; border: none !important; border-radius: 12px !important; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;">
    <div class="card-body" style="background-color: #f5d1d3 !important; padding: 25px !important;">
        <h4>Alterar Palavra-passe</h4>

        <EditForm Model="@passwordModel" OnValidSubmit="SavePassword">
            <!-- REMOVI O ValidationSummary PARA NÃO APARECER EM CIMA -->
            <DataAnnotationsValidator />

            <div class="mb-3 form-group-rosa">
                <label class="form-label">Nova Palavra-passe *</label>
                <InputText type="password" class="form-control" @bind-Value="passwordModel.Password" />
                <ValidationMessage For="@(() => passwordModel.Password)" />
            </div>

            <div class="mb-3 form-group-rosa">
                <label class="form-label">Repetir Palavra-passe *</label>
                <InputText type="password" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
                <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
            </div>

            <div class="d-flex flex-wrap gap-2 mt-3">
                <button type="submit" class="btn btn-success" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status"></span>
                        <text> A processar...</text>
                    }
                    else
                    {
                        <text>Alterar Palavra-passe</text>
                    }
                </button>

                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
            </div>

            <!-- MANTIVE AS MENSAGENS DE SUCESSO/ERRO GERAIS AQUI -->
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success mt-3">@successMessage</div>
            }
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public int UserId { get; set; } = 0;
    [Parameter] public string Token { get; set; } = "";

    private PasswordDto passwordModel = new();
    private bool isLoading = false;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    public class PasswordDto
    {
        [Required(ErrorMessage = "É obrigatório definir uma password")]
        [MinLength(6, ErrorMessage = "A password deve ter pelo menos 6 caracteres")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "É obrigatório repetir a password")]
        [Compare("Password", ErrorMessage = "As passwords não coincidem")]
        public string ConfirmPassword { get; set; } = "";
    }

    private async Task SavePassword()
    {
        isLoading = true;
        successMessage = "";
        errorMessage = "";

        try
        {
            var dto = new SetPasswordDto
            {
                UserId = UserId,
                Token = Token,
                Password = passwordModel.Password
            };

            var response = await Http.PostAsJsonAsync("users/set-password", dto);

            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Palavra-passe alterada com sucesso!");
                passwordModel = new PasswordDto(); // Limpar campos

                // Redireciona após 2 segundos para dar tempo de ver a mensagem
                await Task.Delay(2000);
                await RedirectAfterSuccess();
            }
            else
            {
                var body = await response.Content.ReadAsStringAsync();
                await ShowErrorMessage(string.IsNullOrWhiteSpace(body) ? $"{response.StatusCode}" : body);
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ShowSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = string.Empty;
        StateHasChanged();

        // Desaparece após 3 segundos
        await Task.Delay(3000);
        successMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ShowErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = string.Empty;
        StateHasChanged();

        // Desaparece após 5 segundos (erros ficam mais tempo)
        await Task.Delay(5000);
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private async Task RedirectAfterSuccess()
    {
        if (!string.IsNullOrEmpty(Token))
        {
            // Se veio de um link de redefinição, vai para login
            Navigation.NavigateTo("/", forceLoad: true);
        }
        else
        {
            // Se veio da gestão de utilizadores, volta para lá
            Navigation.NavigateTo("/UserManagement");
        }
    }

    private void Cancel()
    {
        if (!string.IsNullOrEmpty(Token))
            Navigation.NavigateTo("/", forceLoad: true);
        else
            Navigation.NavigateTo("/UserManagement");
    }
}
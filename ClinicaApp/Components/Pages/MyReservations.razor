@page "/MyReservations"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ClinicaApp.DTO
@using ClinicaApp.Data
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="mb-0">As Minhas Reservas</h3>
        <button class="btn btn-outline-danger" @onclick="Logout">Sair</button>
    </div>

    @if (isLoading)
    {
        <div class="alert alert-info">
            <span class="spinner-border spinner-border-sm" role="status"></span> A carregar...
        </div>
    }
    else if (usuarioLogado == null)
    {
        <div class="alert alert-warning">Não autenticado. A redirecionar...</div>
    }
    else
    {
        @if (reservaEmEdicao == null)
        {
            <!-- Lista de Reservas -->
            <h4>As Minhas Reservas</h4>
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead>
                        <tr>
                            <th>Sala</th>
                            <th>Início</th>
                            <th>Fim</th>
                            <th>Observação</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (reservas == null || !reservas.Any())
                        {
                            <tr>
                                <td colspan="5" class="text-center text-muted">
                                    Não existem reservas.
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var r in reservas.OrderBy(r => r.DataHoraInicio))
                            {
                                <tr>
                                    <td>@r.SalaNome</td>
                                    <td>@r.DataHoraInicio.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@r.DataHoraFim.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(r.Mensagem))
                                        {
                                            <div>
                                                <button class="btn btn-sm btn-info mb-1"
                                                        @onclick="() => ToggleMensagem(r.Id)"
                                                        title="Ver mensagem">
                                                    📝
                                                </button>
                                                @if (mensagemVisivel == r.Id)
                                                {
                                                    <div class="alert alert-info p-2 mt-1 small" style="max-width: 300px;">
                                                        @r.Mensagem
                                                        <button class="btn btn-sm btn-close float-end p-0"
                                                                @onclick="() => FecharMensagem()"
                                                                style="font-size: 0.7rem;"></button>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="d-flex flex-wrap gap-1">
                                            <button class="btn btn-sm btn-outline-primary me-2"
                                                    @onclick="() => EditarReserva(r)">
                                                Editar
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger"
                                                    @onclick="() => ApagarReserva(r.Id)">
                                                Remover
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <!-- Formulário de Edição -->
            <div class="card mb-4 formulario-rosa">
                <div class="card-body">
                    <h4>Editar Reserva</h4>

                    <!-- Sala -->
                    <div class="mb-3 form-group-rosa">
                        <label class="form-label">Sala</label>
                        <select class="form-select" @bind="SelectedSalaId" @bind:event="onchange">
                            <option value="0">-- Selecionar Sala --</option>
                            @foreach (var sala in salas)
                            {
                                <option value="@sala.Id">@sala.Nome</option>
                            }
                        </select>
                    </div>

                    <!-- Data -->
                    <div class="mb-3 form-group-rosa">
                        <label class="form-label">Dia</label>
                        <input type="date" class="form-control" @bind="selectedDate" @bind:event="onchange" />
                    </div>

                    <!-- Horários disponíveis -->
                    @if (availableTimes.Any() && SelectedSalaId != 0)
                    {
                        <div class="mb-3 form-group-rosa">
                            <label class="form-label">Horários Disponíveis (@selectedDate.ToString("dd/MM/yyyy"))</label>
                            <div class="d-flex flex-wrap">
                                @foreach (var kv in availableTimes)
                                {
                                    var slotKey = kv.Key;
                                    var isFree = kv.Value;
                                    var isSelected = selectedTimeSlots.Contains(slotKey);
                                    var dotClass = isFree ? (isSelected ? "bg-primary" : "bg-success") : "bg-danger";
                                    var containerClass = isSelected ? "border-primary" : "border-secondary";

                                    <div class="d-flex align-items-center border rounded px-3 py-2 m-1 @containerClass"
                                         style="cursor:@(isFree ? "pointer" : "not-allowed"); min-width:180px;"
                                         @onclick="() => ToggleTimeSlot(slotKey, isFree)">
                                        <div class="rounded-circle @dotClass" style="width:14px; height:14px; margin-right:12px;"></div>
                                        <div>@slotKey</div>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Mensagem -->
                    <div class="mb-3 form-group-rosa">
                        <label class="form-label">Observação (opcional)</label>
                        <textarea class="form-control" @bind="mensagem" rows="3"
                                  placeholder="Ex: Só vou usar a sala por 1 hora, ou Ocorreu um problema na sala..."
                                  maxlength="500"></textarea>
                        <small class="form-text text-muted">Máximo 500 caracteres</small>
                    </div>

                    <div class="d-flex flex-wrap gap-2 mt-4">
                        <button class="btn btn-success" @onclick="SalvarEdicao">Guardar Alterações</button>
                        <button class="btn btn-secondary" @onclick="CancelarEdicao">Cancelar</button>
                    </div>

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3 mb-0">@successMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3 mb-0">@errorMessage</div>
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private UserDto? usuarioLogado;
    private List<ReservaDto>? reservas;
    private List<Sala>? salas;
    private List<HorarioDto> horarios = new();

    private bool isLoading = true;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private ReservaDto? reservaEmEdicao;
    private int SelectedSalaId;
    private DateTime selectedDate = DateTime.Today;
    private Dictionary<string, bool> availableTimes = new();
    private List<string> selectedTimeSlots = new();
    private string mensagem = string.Empty;
    private int? mensagemVisivel = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var result = await SessionStorage.GetAsync<UserDto>("usuarioLogado");
        if (!result.Success || result.Value == null)
        {
            Navigation.NavigateTo("/", forceLoad: true);
            return;
        }

        usuarioLogado = result.Value;

        try
        {
            salas = await Http.GetFromJsonAsync<List<Sala>>("salas");
            horarios = await Http.GetFromJsonAsync<List<HorarioDto>>("horarios");
            await CarregarReservas();
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro ao carregar dados: {ex.Message}");
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task CarregarReservas()
    {
        try
        {
            var todas = await Http.GetFromJsonAsync<List<ReservaDto>>("reservas");
            reservas = todas?.Where(r => r.UserId == usuarioLogado!.Id).ToList();
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro ao carregar reservas: {ex.Message}");
        }
    }

    private async Task EditarReserva(ReservaDto reserva)
    {
        reservaEmEdicao = reserva;
        SelectedSalaId = reserva.SalaId;
        selectedDate = reserva.DataHoraInicio.Date;
        mensagem = reserva.Mensagem ?? string.Empty;
        await LoadAvailableTimes();
        selectedTimeSlots.Clear();
        selectedTimeSlots.Add($"{reserva.DataHoraInicio:HH:mm} - {reserva.DataHoraFim:HH:mm}");
        mensagemVisivel = null;
    }

    private async Task LoadAvailableTimes()
    {
        availableTimes.Clear();

        if (SelectedSalaId == 0 || horarios == null || reservas == null)
        {
            StateHasChanged();
            return;
        }

        var reservasSala = reservas
            .Where(r => r.SalaId == SelectedSalaId && r.DataHoraInicio.Date == selectedDate.Date)
            .ToList();

        foreach (var h in horarios)
        {
            var start = selectedDate.Date.Add(h.HoraInicio);
            var end = selectedDate.Date.Add(h.HoraFim);

            bool ocupado = reservasSala.Any(r => r.DataHoraInicio < end && r.DataHoraFim > start);
            var key = $"{start:HH:mm} - {end:HH:mm}";
            availableTimes[key] = !ocupado;
        }

        StateHasChanged();
    }

    private void ToggleTimeSlot(string slotKey, bool isFree)
    {
        if (!isFree) return;
        selectedTimeSlots.Clear();
        selectedTimeSlots.Add(slotKey);
    }

    private void ToggleMensagem(int reservaId)
    {
        if (mensagemVisivel == reservaId)
        {
            mensagemVisivel = null;
        }
        else
        {
            mensagemVisivel = reservaId;
        }
        StateHasChanged();
    }

    private void FecharMensagem()
    {
        mensagemVisivel = null;
        StateHasChanged();
    }

    private async Task SalvarEdicao()
    {
        if (reservaEmEdicao == null || !selectedTimeSlots.Any()) return;

        try
        {
            var slot = selectedTimeSlots.First().Split(" - ");
            var inicio = selectedDate.Date.Add(TimeSpan.Parse(slot[0]));
            var fim = selectedDate.Date.Add(TimeSpan.Parse(slot[1]));

            var reservaAtualizada = new
            {
                Id = reservaEmEdicao.Id,
                SalaId = SelectedSalaId,
                ProfissionalId = reservaEmEdicao.ProfissionalId,
                DataHoraInicio = inicio,
                DataHoraFim = fim,
                UserId = reservaEmEdicao.UserId,
                Mensagem = mensagem
            };

            var response = await Http.PutAsJsonAsync($"reservas/{reservaEmEdicao.Id}", reservaAtualizada);
            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Reserva editada com sucesso!");
                reservaEmEdicao = null;
                mensagem = string.Empty;
                mensagemVisivel = null;
                await CarregarReservas();
            }
            else
            {
                var body = await response.Content.ReadAsStringAsync();
                await ShowErrorMessage($"Erro ao editar: {body}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
    }

    private void CancelarEdicao()
    {
        reservaEmEdicao = null;
        mensagem = string.Empty;
        mensagemVisivel = null;
        ClearMessages();
    }

    private async Task ApagarReserva(int id)
    {
        var confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Tem a certeza que deseja apagar esta reserva?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"reservas/{id}");
            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Reserva apagada com sucesso!");
                mensagemVisivel = null;
                await CarregarReservas();
            }
            else
            {
                var body = await response.Content.ReadAsStringAsync();
                await ShowErrorMessage($"Erro ao apagar: {body}");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
    }

    private async Task ShowSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = string.Empty;
        StateHasChanged();

        await Task.Delay(3000);
        successMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ShowErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = string.Empty;
        StateHasChanged();

        await Task.Delay(5000);
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private void ClearMessages()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("usuarioLogado");
        Navigation.NavigateTo("/", forceLoad: true);
    }
}
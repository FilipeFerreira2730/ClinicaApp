@page "/Salas"
@using ClinicaApp.Data
@using ClinicaApp.DTO
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="mb-0">Gestão de Salas</h3>
        <button class="btn btn-outline-danger" @onclick="Logout">Sair</button>
    </div>

    @if (isLoadingInitial)
    {
        <div class="alert alert-info">
            <span class="spinner-border spinner-border-sm" role="status"></span> A carregar...
        </div>
    }
    else if (usuarioLogado == null)
    {
        <div class="alert alert-warning">Não autenticado. A redirecionar...</div>
    }
    else if (usuarioLogado.RoleId != 1)
    {
        <div class="alert alert-danger">Acesso negado. Apenas administradores podem gerir salas.</div>
    }
    else
    {
        <!-- Formulário -->
        <div class="card mb-4 formulario-rosa"
             style="background-color: #f5d1d3 !important; border: none !important; border-radius: 12px !important;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;">
            <div class="card-body" style="background-color: #f5d1d3 !important; padding: 25px !important;">
                <h4>@(editingSalaId.HasValue ? "Editar Sala" : "Criar Nova Sala")</h4>

                <div class="row">
                    <div class="col-md-6 col-lg-4">
                        <div class="mb-3 form-group-rosa">
                            <label class="form-label">Nome da Sala</label>
                            <input type="text" class="form-control" @bind="salaNome" />
                        </div>
                    </div>
                </div>

                <div class="d-flex flex-wrap gap-2 mt-3">
                    <button class="btn btn-success" @onclick="SalvarSala">
                        @(editingSalaId.HasValue ? "Guardar Alterações" : "Adicionar Sala")
                    </button>
                    @if (editingSalaId.HasValue)
                    {
                        <button class="btn btn-secondary" @onclick="CancelarEdicao">Cancelar</button>
                    }
                </div>

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mt-3 mb-0">@successMessage</div>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3 mb-0">@errorMessage</div>
                }
            </div>
        </div>

        <!-- Lista de Salas (estilo igual aos horários) -->
        <h4>Lista de Salas</h4>
        <div class="table-responsive">
            <table class="table table-striped align-middle">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!salas.Any())
                    {
                        <tr><td colspan="2" class="text-center text-muted">Não existem salas.</td></tr>
                    }
                    else
                    {
                        @foreach (var s in salas)
                        {
                            <tr>
                                <td>@s.Nome</td>
                                <td>
                                    <div class="d-flex flex-wrap gap-1">
                                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditarSala(s)">Editar</button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoverSala(s.Id)">Remover</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private UserDto? usuarioLogado;
    private List<Sala> salas = new();
    private bool isLoadingInitial = true;

    private string salaNome = string.Empty;
    private int? editingSalaId = null;

    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var result = await SessionStorage.GetAsync<UserDto>("usuarioLogado");
        if (!result.Success || result.Value == null)
        {
            Navigation.NavigateTo("/", forceLoad: true);
            return;
        }

        usuarioLogado = result.Value;

        if (usuarioLogado.RoleId == 1)
        {
            await LoadSalas();
        }

        isLoadingInitial = false;
        StateHasChanged();
    }

    private async Task LoadSalas()
    {
        try
        {
            salas = await Http.GetFromJsonAsync<List<Sala>>("salas") ?? new List<Sala>();
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro ao carregar salas: {ex.Message}");
        }
    }

    private void EditarSala(Sala s)
    {
        editingSalaId = s.Id;
        salaNome = s.Nome;
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

    private void CancelarEdicao()
    {
        editingSalaId = null;
        salaNome = string.Empty;
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

    private async Task SalvarSala()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(salaNome))
        {
            await ShowErrorMessage("O nome da sala é obrigatório.");
            return;
        }

        // Verificar se já existe uma sala com o mesmo nome (ignorando case e espaços)
        var nomeNormalizado = salaNome.Trim().ToLower();
        var salaExistente = salas.FirstOrDefault(s =>
            s.Nome.Trim().ToLower() == nomeNormalizado &&
            s.Id != editingSalaId);

        if (salaExistente != null)
        {
            await ShowErrorMessage($"Já existe uma sala com o nome '{salaExistente.Nome}'.");
            return;
        }

        try
        {
            var dto = new { Nome = salaNome.Trim() };

            HttpResponseMessage resp;
            if (editingSalaId.HasValue)
                resp = await Http.PutAsJsonAsync($"salas/{editingSalaId.Value}", dto);
            else
                resp = await Http.PostAsJsonAsync("salas", dto);

            if (!resp.IsSuccessStatusCode)
            {
                var errorBody = await resp.Content.ReadAsStringAsync();
                await ShowErrorMessage(errorBody);
                return;
            }

            await ShowSuccessMessage(editingSalaId.HasValue ? "Sala editada com sucesso!" : "Sala criada com sucesso!");
            await LoadSalas();

            editingSalaId = null;
            salaNome = string.Empty;
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro ao salvar sala: {ex.Message}");
        }
    }

    private async Task RemoverSala(int salaId)
    {
        var confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Tem a certeza que deseja remover esta sala?");
        if (!confirm) return;

        try
        {
            var resp = await Http.DeleteAsync($"salas/{salaId}");
            if (!resp.IsSuccessStatusCode)
            {
                var errorBody = await resp.Content.ReadAsStringAsync();
                await ShowErrorMessage(errorBody);
                return;
            }

            await ShowSuccessMessage("Sala removida com sucesso!");
            await LoadSalas();
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro ao remover sala: {ex.Message}");
        }
    }

    private async Task ShowSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = string.Empty;
        StateHasChanged();

        await Task.Delay(3000);
        successMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ShowErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = string.Empty;
        StateHasChanged();

        await Task.Delay(5000);
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("usuarioLogado");
        Navigation.NavigateTo("/", forceLoad: true);
    }
}
@page "/UserManagement"
@using ClinicaApp.DTO
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager Navigation

@rendermode InteractiveServer
<link href="UserManagement.razor.css" rel="stylesheet" />

<div class="user-management-page">
    <div class="user-management-container">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
            <h3 class="mb-0">Gestão de Profissionais</h3>
            <button class="btn btn-outline-danger mt-2 mt-md-0" @onclick="Logout">Sair</button>
        </div>

        <!-- Formulário -->
        <div class="card mb-4 formulario-rosa"
             style="background-color: #f5d1d3 !important; border: none !important; border-radius: 12px !important; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;">
            <div class="card-body" style="background-color: #f5d1d3 !important; padding: 25px !important;">
                <h4>@(editMode ? "Editar Profissional" : "Criar Novo Profissional")</h4>

                <EditForm Model="@currentUser" OnValidSubmit="SaveUser">
                    <!-- REMOVI O ValidationSummary PARA NÃO APARECER EM CIMA -->
                    <DataAnnotationsValidator />

                    <div class="row">
                        <div class="col-md-6 mb-2 form-group-rosa">
                            <label class="form-label">Nome</label>
                            <InputText class="form-control" @bind-Value="currentUser.Nome" />
                            <ValidationMessage For="@(() => currentUser.Nome)" />
                        </div>

                        <div class="col-md-6 mb-2 form-group-rosa">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="currentUser.Email" />
                            <ValidationMessage For="@(() => currentUser.Email)" />
                        </div>

                        <div class="col-md-6 mb-2 form-group-rosa">
                            <label class="form-label">Telemóvel</label>
                            <InputText class="form-control" @bind-Value="currentUser.Telefone" />
                            <ValidationMessage For="@(() => currentUser.Telefone)" />
                        </div>

                        <div class="col-md-6 mb-2 form-group-rosa">
                            <label class="form-label">Função</label>
                            <InputSelect class="form-control" @bind-Value="currentUser.RoleId">
                                @foreach (var role in roles)
                                {
                                    <option value="@role.Key">@role.Value</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => currentUser.RoleId)" />
                        </div>

                        <div class="col-md-6 mb-2 form-group-rosa">
                            <label class="form-label">Especialidade</label>
                            <InputText class="form-control" @bind-Value="currentProfissional.Especialidade" />
                            <ValidationMessage For="@(() => currentProfissional.Especialidade)" />
                        </div>
                    </div>

                    <div class="d-flex flex-wrap gap-2 mt-3">
                        <button type="submit" class="btn btn-success" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status"></span>
                                <text> A processar...</text>
                            }
                            else
                            {
                                <text>@(editMode ? "Guardar Alterações" : "Criar")</text>
                            }
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancelar</button>
                    </div>

                    <!-- MANTIVE AS MENSAGENS DE SUCESSO/ERRO GERAIS AQUI -->
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3">@successMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">@errorMessage</div>
                    }
                </EditForm>
            </div>
        </div>

        <!-- Tabela de Utilizadores -->
        @if (users != null && users.Any())
        {
            <h4>Lista de Utilizadores</h4>
            <div class="table-responsive">
                <table class="table table-striped align-middle">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Email</th>
                            <th>Telemóvel</th>
                            <th>Profissional</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var u in users)
                        {
                            <tr>
                                <td data-label="Nome">@u.Nome</td>
                                <td data-label="Email">@u.Email</td>
                                <td data-label="Telemóvel">@u.Telefone</td>
                                <td data-label="Profissional">@((u.Profissional != null) ? u.Profissional.Especialidade : "-")</td>
                                <td data-label="Ações">
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="@(() => EditUser(u))">Editar</button>
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="@(() => SendPasswordReset(u.Id))">Enviar email</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="@(() => DeleteUser(u.Id))">Remover</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<UserDto>? users;
    private UserDto currentUser = new();
    private ProfissionalDto currentProfissional = new();
    private UserDto? usuarioLogado;
    private bool editMode;
    private bool isLoading;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private UserDto? backupUser;
    private ProfissionalDto? backupProfissional;

    private Dictionary<int, string> roles = new()
    {
        { 1, "Admin" },
        { 2, "Profissional" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await SessionStorage.GetAsync<UserDto>("usuarioLogado");
            if (!result.Success || result.Value == null)
            {
                Navigation.NavigateTo("/", forceLoad: true);
                return;
            }

            usuarioLogado = result.Value;

            // Só admins podem aceder
            if (usuarioLogado.RoleId != 1)
            {
                Navigation.NavigateTo("/AcessoNegado", forceLoad: true);
                return;
            }

            await LoadUsers();
            StateHasChanged();
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            users = await Http.GetFromJsonAsync<List<UserDto>>("users");
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro ao carregar utilizadores: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void EditUser(UserDto user)
    {
        currentUser = new UserDto
        {
            Id = user.Id,
            Nome = user.Nome,
            Email = user.Email,
            Telefone = user.Telefone,
            RoleId = user.RoleId,
            RoleNome = user.RoleNome
        };

        currentProfissional = user.Profissional != null
            ? new ProfissionalDto
            {
                Id = user.Profissional.Id,
                UserId = user.Id,
                Especialidade = user.Profissional.Especialidade
            }
            : new ProfissionalDto();

        backupUser = currentUser;
        backupProfissional = currentProfissional;

        editMode = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        currentUser = new UserDto();
        currentProfissional = new ProfissionalDto();
        editMode = false;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();
    }

    private async Task SaveUser()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            HttpResponseMessage response;

            if (editMode && currentUser.Id > 0)
                response = await Http.PutAsJsonAsync($"users/{currentUser.Id}", currentUser);
            else
                response = await Http.PostAsJsonAsync("users", currentUser);

            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                if (!string.IsNullOrWhiteSpace(currentProfissional.Especialidade))
                {
                    if (currentProfissional.Id > 0)
                        await Http.PutAsJsonAsync($"profissionais/{currentProfissional.Id}", currentProfissional);
                    else
                    {
                        var novoUser = editMode ? currentUser : await response.Content.ReadFromJsonAsync<UserDto>();
                        currentProfissional.UserId = novoUser?.Id ?? 0;
                        await Http.PostAsJsonAsync("profissionais", currentProfissional);
                    }
                }

                await ShowSuccessMessage(editMode ? "Editado com sucesso!" : "Criado com sucesso!");
                await LoadUsers();

                // Reseta o formulário sem limpar as mensagens (já são geridas pelo timer)
                currentUser = new UserDto();
                currentProfissional = new ProfissionalDto();
                editMode = false;
            }
            else
            {
                await ShowErrorMessage(string.IsNullOrWhiteSpace(responseBody) ? $"{response.StatusCode}" : responseBody);
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteUser(int userId)
    {
        var confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Tem a certeza que deseja remover este utilizador?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"users/{userId}");
            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Removido com sucesso!");
                await LoadUsers();
            }
            else
            {
                var body = await response.Content.ReadAsStringAsync();
                await ShowErrorMessage(string.IsNullOrWhiteSpace(body) ? $"Erro ao remover: {response.StatusCode}" : body);
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task SendPasswordReset(int userId)
    {
        try
        {
            var response = await Http.PostAsync($"users/send-password-reset?userId={userId}", null);
            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Email enviado!");
            }
            else
            {
                var body = await response.Content.ReadAsStringAsync();
                await ShowErrorMessage(string.IsNullOrWhiteSpace(body) ? $"Erro ao enviar email: {response.StatusCode}" : body);
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task ShowSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = string.Empty;
        StateHasChanged();

        // Desaparece após 3 segundos
        await Task.Delay(3000);
        successMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ShowErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = string.Empty;
        StateHasChanged();

        // Desaparece após 5 segundos (erros ficam mais tempo)
        await Task.Delay(5000);
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private void ClearMessages()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("usuarioLogado");
        Navigation.NavigateTo("/", forceLoad: true);
    }
}
@page "/UserManagement"
@using ClinicaApp.DTO
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage
@inject IJSRuntime JsRuntime

@rendermode InteractiveServer

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="mb-0">Gestão de Profissionais</h3>
        <button class="btn btn-outline-danger" @onclick="Logout">Sair</button>
    </div>

    @if (isLoadingInitial)
    {
        <div class="alert alert-info">
            <span class="spinner-border spinner-border-sm" role="status"></span> A carregar...
        </div>
    }
    else if (usuarioLogado == null)
    {
        <div class="alert alert-warning">Não autenticado. A redirecionar...</div>
    }
    else if (usuarioLogado.RoleId != 1)
    {
        <div class="alert alert-danger">Acesso negado. Apenas administradores podem gerir profissionais.</div>
    }
    else
    {
        <!-- Formulário -->
        <div class="card mb-4 formulario-rosa">
            <div class="card-body">
                <h4>@(editMode ? "Editar Profissional" : "Criar Novo Profissional")</h4>
                <div class="row g-3">
                    <div class="col-md-6 col-lg-4 form-group-rosa">
                        <label class="form-label">Nome</label>
                        <input type="text" class="form-control" @bind="currentUser.Nome" />
                    </div>
                    <div class="col-md-6 col-lg-4 form-group-rosa">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" @bind="currentUser.Email" />
                    </div>
                    <div class="col-md-6 col-lg-4 form-group-rosa">
                        <label class="form-label">Telemóvel</label>
                        <input type="text" class="form-control" @bind="currentUser.Telefone" />
                    </div>
                    <div class="col-md-6 col-lg-4 form-group-rosa">
                        <label class="form-label">Função</label>
                        <select class="form-control" @bind="currentUser.RoleId">
                            @foreach (var role in roles)
                            {
                                <option value="@role.Key">@role.Value</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6 col-lg-4 form-group-rosa">
                        <label class="form-label">Especialidade</label>
                        <input type="text" class="form-control" @bind="currentProfissional.Especialidade" />
                    </div>
                </div>
                <div class="d-flex flex-wrap gap-2 mt-4">
                    <button class="btn btn-success" @onclick="SaveUser" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                            <text> A processar...</text>
                        }
                        else
                        {
                            <text>@(editMode ? "Guardar Alterações" : "Criar Profissional")</text>
                        }
                    </button>
                    <button class="btn btn-secondary"
                            @onclick="CancelEdit"
                            disabled="@(!editMode && IsFormEmpty)">
                        Cancelar
                    </button>
                </div>
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mt-3 mb-0">@successMessage</div>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3 mb-0">@errorMessage</div>
                }
            </div>
        </div>

        <!-- Lista de Utilizadores -->
        <h4>Lista de Utilizadores</h4>
        <div class="table-responsive">
            <table class="table table-striped align-middle">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Email</th>
                        <th>Telemóvel</th>
                        <th>Especialidade</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @if (users == null || !users.Any())
                    {
                        <tr><td colspan="5" class="text-center text-muted">Não existem utilizadores.</td></tr>
                    }
                    else
                    {
                        @foreach (var u in users)
                        {
                            <tr>
                                <td>@u.Nome</td>
                                <td>@u.Email</td>
                                <td>@u.Telefone</td>
                                <td>@((u.Profissional != null) ? u.Profissional.Especialidade : "-")</td>
                                <td>
                                    <div class="d-flex flex-wrap gap-1">
                                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => EditUser(u)">Editar</button>
                                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => SendPasswordReset(u.Id)">Enviar email</button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteUser(u.Id)">Remover</button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private UserDto? usuarioLogado;
    private List<UserDto>? users;
    private bool isLoadingInitial = true;
    private bool isLoading = false;

    private UserDto currentUser = new();
    private ProfissionalDto currentProfissional = new();
    private bool editMode = false;

    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    private Dictionary<int, string> roles = new()
    {
        { 1, "Admin" },
        { 2, "Profissional" }
    };

    private bool IsFormEmpty =>
        string.IsNullOrWhiteSpace(currentUser.Nome) &&
        string.IsNullOrWhiteSpace(currentUser.Email) &&
        string.IsNullOrWhiteSpace(currentUser.Telefone) &&
        string.IsNullOrWhiteSpace(currentProfissional.Especialidade);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var result = await SessionStorage.GetAsync<UserDto>("usuarioLogado");
        if (!result.Success || result.Value == null)
        {
            Navigation.NavigateTo("/", forceLoad: true);
            return;
        }

        usuarioLogado = result.Value;

        if (usuarioLogado.RoleId == 1)
        {
            await LoadUsers();
        }

        isLoadingInitial = false;
        StateHasChanged();
    }

    private async Task LoadUsers()
    {
        try
        {
            users = await Http.GetFromJsonAsync<List<UserDto>>("users") ?? new List<UserDto>();
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro ao carregar utilizadores: {ex.Message}");
        }
    }

    private void EditUser(UserDto user)
    {
        currentUser = new UserDto
        {
            Id = user.Id,
            Nome = user.Nome,
            Email = user.Email,
            Telefone = user.Telefone,
            RoleId = user.RoleId,
            RoleNome = user.RoleNome
        };

        currentProfissional = user.Profissional != null
            ? new ProfissionalDto
            {
                Id = user.Profissional.Id,
                UserId = user.Id,
                Especialidade = user.Profissional.Especialidade
            }
            : new ProfissionalDto();

        editMode = true;
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

    private void CancelEdit()
    {
        currentUser = new UserDto();
        currentProfissional = new ProfissionalDto();
        editMode = false;
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

    private async Task SaveUser()
    {
        isLoading = true;
        successMessage = string.Empty;
        errorMessage = string.Empty;

        // Validações básicas
        if (string.IsNullOrWhiteSpace(currentUser.Nome))
        {
            await ShowErrorMessage("O nome é obrigatório.");
            isLoading = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(currentUser.Email))
        {
            await ShowErrorMessage("O email é obrigatório.");
            isLoading = false;
            return;
        }

        try
        {
            HttpResponseMessage response;

            if (editMode && currentUser.Id > 0)
            {
                // EDIÇÃO
                response = await Http.PutAsJsonAsync($"users/{currentUser.Id}", currentUser);

                if (response.IsSuccessStatusCode)
                {
                    // Atualizar profissional se tiver especialidade
                    if (!string.IsNullOrWhiteSpace(currentProfissional.Especialidade))
                    {
                        if (currentProfissional.Id > 0)
                        {
                            await Http.PutAsJsonAsync($"profissionais/{currentProfissional.Id}", currentProfissional);
                        }
                        else
                        {
                            await Http.PostAsJsonAsync("profissionais", new
                            {
                                UserId = currentUser.Id,
                                Especialidade = currentProfissional.Especialidade
                            });
                        }
                    }

                    await ShowSuccessMessage("Profissional editado com sucesso!");
                    await LoadUsers(); // Recarregar da API
                }
                else
                {
                    var responseBody = await response.Content.ReadAsStringAsync();
                    await ShowErrorMessage(string.IsNullOrWhiteSpace(responseBody) ?
                        $"Erro: {response.StatusCode}" : responseBody);
                }
            }
            else
            {
                // CRIAÇÃO - CORREÇÃO AQUI
                response = await Http.PostAsJsonAsync("users", currentUser);
                var responseBody = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    var novoUser = await response.Content.ReadFromJsonAsync<UserDto>();

                    if (novoUser != null)
                    {
                        // Criar profissional se tiver especialidade
                        if (!string.IsNullOrWhiteSpace(currentProfissional.Especialidade))
                        {
                            var profissionalResponse = await Http.PostAsJsonAsync("profissionais", new
                            {
                                UserId = novoUser.Id,
                                Especialidade = currentProfissional.Especialidade
                            });

                            if (profissionalResponse.IsSuccessStatusCode)
                            {
                                // Atualizar a lista LOCALMENTE com o novo profissional
                                novoUser.Profissional = new ProfissionalDto
                                {
                                    UserId = novoUser.Id,
                                    Especialidade = currentProfissional.Especialidade
                                };
                            }
                        }

                        // Adicionar o novo user à lista local
                        users ??= new List<UserDto>();
                        users.Add(novoUser);

                        await ShowSuccessMessage("Profissional criado com sucesso!");
                    }
                }
                else
                {
                    await ShowErrorMessage(string.IsNullOrWhiteSpace(responseBody) ?
                        $"Erro: {response.StatusCode}" : responseBody);
                }
            }

            // Reset do formulário
            currentUser = new UserDto();
            currentProfissional = new ProfissionalDto();
            editMode = false;
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteUser(int userId)
    {
        var confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Tem a certeza que deseja remover este utilizador?");
        if (!confirm) return;

        try
        {
            var response = await Http.DeleteAsync($"users/{userId}");
            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Utilizador removido com sucesso!");
                await LoadUsers();
            }
            else
            {
                var body = await response.Content.ReadAsStringAsync();
                await ShowErrorMessage(string.IsNullOrWhiteSpace(body) ?
                    $"Erro ao remover: {response.StatusCode}" : body);
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
    }

    private async Task SendPasswordReset(int userId)
    {
        try
        {
            var response = await Http.PostAsync($"users/send-password-reset?userId={userId}", null);
            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Email enviado com sucesso!");
            }
            else
            {
                var body = await response.Content.ReadAsStringAsync();
                await ShowErrorMessage(string.IsNullOrWhiteSpace(body) ?
                    $"Erro ao enviar email: {response.StatusCode}" : body);
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"Erro inesperado: {ex.Message}");
        }
    }

    private async Task ShowSuccessMessage(string message)
    {
        successMessage = message;
        errorMessage = string.Empty;
        StateHasChanged();

        await Task.Delay(3000);
        successMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ShowErrorMessage(string message)
    {
        errorMessage = message;
        successMessage = string.Empty;
        StateHasChanged();

        await Task.Delay(5000);
        errorMessage = string.Empty;
        StateHasChanged();
    }

    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("usuarioLogado");
        Navigation.NavigateTo("/", forceLoad: true);
    }
}